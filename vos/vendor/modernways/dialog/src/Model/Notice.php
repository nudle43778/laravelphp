<?php 
namespace ModernWays\Dialog\Model;

    /** 
    * Feedback class. Is required for all BLL classes that 
    * are generated by An Orm Apart. 
    * @lastmodified 30/08/2014 
    * @since 01/06/2013            
    * @author Entreprise de Modes et de Manieres Modernes - e3M        
    * @version 0.1 
    */     
class Notice implements INotice
{
    // design bestaat erin de data te identificeren
    // en de methoden 
    // enkelvoudige variabelen
    protected $caption;
    protected $code;
    protected $codeDriver; // for SQL or other provider code
    protected $className;
    protected $context;
    protected $debugInfo;
    protected $endTime;
    protected $name;
    protected $startTime;
    protected $text;
    protected $type;

    /**
     * @return mixed
     */
    public function getCaption()
    {
        return $this->caption;
    }

    /**
     * @param mixed $caption
     */
    public function setCaption($caption)
    {
        $this->caption = $caption;
    }

    /**
     * @return mixed
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * @param mixed $code
     */
    public function setCode($code)
    {
        $this->code = $code;
    }

    /**
     * @return mixed
     */
    public function getContext()
    {
        return $this->context;
    }

    /**
     * @param mixed $context
     */
    public function setContext($context)
    {
        $this->context = $context;
    }

    /**
     * Returns the function name that called for logging.
     * Returns ? if function name can't be determined.
     * Uses stack dump to find function name.
     */
    public function setDebugInfo($value = null)
    {
        if (is_null($value)) {
            $stack = debug_backtrace();
            for ($i = 0; $i < count($stack); $i++) {
                // alleen vanaf de vijfde, na alle logbook call's
                //if ($i > 4) {
                //    $this->debugInfo .= '<br/>';
                //    $this->debugInfo .= $stack[$i]['class'];
                //    $this->debugInfo .= $stack[$i]['type'];
                //    $this->debugInfo .= $stack[$i]['function'] . ' ';
                //    $this->debugInfo .= $stack[$i]['line'];
                //}
            }
        } else {
            $this->debugInfo = $value;
        }
    }

    public function getDebugInfo()
    {
        return $this->debugInfo;
    }

    /**
     * @return mixed
     */
    public function getCodeDriver()
    {
        return $this->codeDriver;
    }

    /**
     * @param mixed $codeDriver
     */
    public function setCodeDriver($codeDriver)
    {
        $this->errorCodeDriver = $codeDriver;
    }

    /**
     * @return mixed
     */
    public function getClassName()
    {
        return $this->className;
    }

    /**
     * set the latest class in the stack
     */
    public function setClassName($value = null)
    {
        if (is_null($value)) {
            $stack = debug_backtrace();
            // var_dump($stack);
            if (count($stack) > 0) {
                if (isset($stack[count($stack) - 1]['class'])) {
                    $this->className = $stack[count($stack) - 1]['class'];
                }
                elseif (isset($stack[count($stack) - 1]['function'])) {
                    $this->className = $stack[count($stack) - 1]['function'];
                }
            }
        } else {
            $this->className = $value;
        }
    }

    /**
     * @return mixed
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * @param mixed $name
     */
    public function setName($name)
    {
        $this->name = strtoupper($name);
    }

    /**
     * @return mixed
     */
    public function getEndTime()
    {
        return $this->endTime;
    }

    /**
     *
     */
    public function setEndTime($value = null)
    {
        if (is_null($value)) {
            // if new name and not 'none' then we know it is the start of a new process
            if ($this->name == 'NONE') {
                $this->endTime = '00:00';
            } else {
                $this->endTime = date("Y-m-d H:i:s");
            }
        } else {
            $this->endTime = $value;
        }
    }

    /**
     * @return mixed
     */
    public function getStartTime()
    {
        return $this->startTime;
    }

    /**
     *
     */
    public function setStartTime($value = null)
    {
        if (is_null($value)) {
            // if new name and not 'none' then we know it is the start of a new process
            if ($this->name == 'NONE') {
                $this->startTime = '00:00';
            } else {
                $this->startTime = date("Y-m-d H:i:s");
            }
        }
        else {
            $this->startTime = $value;
        }
    }


    // takes the name and timestamp for key
    public function startTimeInKey($name)
    {
        $name = $name . ' ' . date("Y-m-d H:i:s");
        $this->start($name);
    }

    /**
     * @return mixed
     */
    public function getText()
    {
        return $this->text;
    }

    /**
     * @param mixed $text
     */
    public function setText($text)
    {
        $this->text = $text;
    }

    /**
     * @return mixed
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * @param mixed $type
     */
    public function setType($type)
    {
        $this->type = $type;
    }

    // constructor wordt uitgevoerd met 
    // het new keyword 
    public function __construct() 
    { 
        $this->Start('none'); 
    } 
  
    public function copy()
    { 
        $copy = new Notice();
        $copy->setCaption($this->caption);
        $copy->setClassName($this->className);
        $copy->setCode($this->code);
        $copy->setContext($this->context);
        $copy->setDebugInfo($this->debugInfo);
        $copy->setCodeDriver($this->codeDriver);
        $copy->setEndTime($this->endTime);
        $copy->setText($this->text);
        $copy->setType($this->type);
        $copy->setName($this->name);
        $copy->setStartTime($this->startTime);
        return $copy;
    } 

    public function reset()
    {
        $this->text = 'gereset';
        $this->caption = 'gereset';
        $this->className = '';
        $this->code = '';
        $this->debugInfo = '';
        $this->codeDriver = '';
        $this->type = '';
        $this->name = '';
        $this->startTime = '';
        $this->endTime = '';
        $this->context = '';
    }
                 
    //takes only the name as key 
    public function start($name) 
    { 
        $this->setName($name);
        $this->setClassName();
        $this->setDebugInfo();
        $this->setStartTime('NONE');
        $this->setEndTime = 'NONE';
        $this->caption = 'no feedback';
        $this->caption = 'no error message';
        $this->code = 'no error code';
        $this->codeDriver = 'no error code driver';
        $this->type = 'no type';
        $this->context = 'no context';
    } 
}

